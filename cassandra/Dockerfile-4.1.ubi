ARG UBI_MAJOR=9
ARG UBI_BASETAG=latest
ARG CASSANDRA_VERSION=4.1.10
FROM cassandra:${CASSANDRA_VERSION} AS cassandra-base

FROM --platform=$BUILDPLATFORM registry.access.redhat.com/ubi${UBI_MAJOR}/ubi-minimal:${UBI_BASETAG} AS builder

ARG METRICS_COLLECTOR_VERSION=0.3.6
ARG METRICS_COLLECTOR_BUNDLE=${METRICS_COLLECTOR_VERSION}-4.1-beta1
ARG CASSANDRA_VERSION

ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'
ENV CASSANDRA_HOME=/opt/cassandra

# Update base layer
RUN microdnf install -y --nodocs shadow-utils \
    && groupadd -r cassandra --gid=999 \
    && useradd -m -d "$CASSANDRA_HOME" -r -g cassandra -G root --uid=999 cassandra \
    && microdnf update && rm -rf /var/cache/yum \
# Install packages needed during install process
    && microdnf install -y tar gzip unzip && microdnf clean all

WORKDIR /

###
# Download and extract Metrics Collector
###
ENV MCAC_PATH=/opt/metrics-collector
ADD "https://github.com/datastax/metric-collector-for-apache-cassandra/releases/download/v${METRICS_COLLECTOR_VERSION}/datastax-mcac-agent-${METRICS_COLLECTOR_BUNDLE}.tar.gz" ./
RUN mkdir -m 775 ${MCAC_PATH} && \
    tar --directory ${MCAC_PATH} --strip-components 1 --gzip --extract --file datastax-mcac-agent-${METRICS_COLLECTOR_BUNDLE}.tar.gz && \
    chmod -R g+w ${MCAC_PATH}

###
# Download CDC Agent jarfile
###
ARG CDC_AGENT_VERSION=2.3.2
ARG CDC_AGENT_EDITION=agent-c4
ENV CDC_AGENT_PATH=/opt/cdc_agent
ADD "https://github.com/datastax/cdc-apache-cassandra/releases/download/v${CDC_AGENT_VERSION}/${CDC_AGENT_EDITION}-${CDC_AGENT_VERSION}-all.jar" ./
RUN mkdir -m 775 ${CDC_AGENT_PATH} && \
  mv ${CDC_AGENT_EDITION}-${CDC_AGENT_VERSION}-all.jar ${CDC_AGENT_PATH}/ && \
  cd ${CDC_AGENT_PATH}/ && \
  ln -s ${CDC_AGENT_EDITION}-${CDC_AGENT_VERSION}-all.jar cdc-agent.jar && \
  chmod -R g+w ${CDC_AGENT_PATH}

###
# Copy Cassandra
###
COPY --from=cassandra-base /etc/cassandra /etc/cassandra
COPY --from=cassandra-base ${CASSANDRA_HOME} ${CASSANDRA_HOME}

FROM --platform=linux/amd64 builder AS cassandra-builder-amd64
# MCAC isn't supported on ARM achitectures
ENV CASSANDRA_PATH=${CASSANDRA_HOME}
ENV CASSANDRA_CONF=${CASSANDRA_PATH}/conf
ENV MCAC_PATH=/opt/metrics-collector
RUN if ! grep -qxF "JVM_OPTS=\"\$JVM_OPTS -javaagent:${MCAC_PATH}/lib/datastax-mcac-agent.jar\"" < ${CASSANDRA_CONF}/cassandra-env.sh ; then \
    echo "" >> ${CASSANDRA_CONF}/cassandra-env.sh && \
    echo "if  [ -z \"\${MGMT_API_DISABLE_MCAC}\" ] ; then" >> ${CASSANDRA_CONF}/cassandra-env.sh ; \
    echo "  JVM_OPTS=\"\$JVM_OPTS -javaagent:${MCAC_PATH}/lib/datastax-mcac-agent.jar\"" >> ${CASSANDRA_CONF}/cassandra-env.sh ; \
    echo "fi"  >> ${CASSANDRA_CONF}/cassandra-env.sh ; \
  fi


FROM --platform=linux/arm64 builder AS cassandra-builder-arm64

FROM cassandra-builder-${TARGETARCH} AS cassandra-builder

#############################################################
# Copy Management API
FROM --platform=$BUILDPLATFORM alpine:latest AS mgmtapi-setup

WORKDIR /build
ENV MAAC_PATH=/opt/management-api

COPY management-api-agent-4.1.x/target/datastax-mgmtapi-agent*.jar ./
COPY management-api-server/target/datastax-mgmtapi-server*.jar ./
RUN mkdir -m 775 ${MAAC_PATH} && \
    find /build -type f -name "datastax-mgmtapi*.jar" -exec mv -t $MAAC_PATH -i '{}' + && \
    rm $MAAC_PATH/datastax-mgmtapi*test* && \
    cd ${MAAC_PATH} && \
    ln -s datastax-mgmtapi-agent*.jar datastax-mgmtapi-agent.jar && \
    ln -s datastax-mgmtapi-server*.jar datastax-mgmtapi-server.jar && \
    chmod -R g+w ${MAAC_PATH}

############################################################

FROM registry.access.redhat.com/ubi${UBI_MAJOR}/ubi-minimal:${UBI_BASETAG} AS cassandra
ARG TARGETARCH
ARG CASSANDRA_VERSION
ENV CASSANDRA_VERSION=${CASSANDRA_VERSION}

LABEL maintainer="DataStax, Inc <info@datastax.com>"
LABEL name="Apache Cassandra"
LABEL vendor="DataStax, Inc"
LABEL release="${CASSANDRA_VERSION}"
LABEL summary="Apache Cassandra is an open source distributed database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure. Cassandra offers robust support for clusters spanning multiple datacenters, with asynchronous masterless replication allowing low latency operations for all clients."
LABEL description="Apache Cassandra is an open source distributed database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure. Cassandra offers robust support for clusters spanning multiple datacenters, with asynchronous masterless replication allowing low latency operations for all clients."

ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

ENV CASSANDRA_PATH=/opt/cassandra
ENV MAAC_PATH=/opt/management-api
ENV MCAC_PATH=/opt/metrics-collector
ENV CDC_AGENT_PATH=/opt/cdc_agent
ENV MGMT_AGENT_JAR="${MAAC_PATH}/datastax-mgmtapi-agent.jar"

ENV PATH=${CASSANDRA_PATH}/bin:${PATH}
ENV CASSANDRA_HOME=${CASSANDRA_PATH}
ENV CASSANDRA_CONF=${CASSANDRA_PATH}/conf
ENV CASSANDRA_LOG_DIR=/var/log/cassandra
ENV CASSANDRA_DATA_DIR=/var/lib/cassandra

# Copy the Adoptium repo file for latest OpenJDK updates
COPY cassandra/rh-repos/adoptium.repo /etc/yum.repos.d/adoptium.repo

# Update base layer
RUN microdnf install -y --nodocs shadow-utils \
    && groupadd -r cassandra --gid=999 \
    && useradd -m -d "$CASSANDRA_HOME" -r -g cassandra -G root --uid=999 cassandra \
    && microdnf update && rm -rf /var/cache/yum \
# Install packages needed during install process
    && microdnf install -y --nodocs temurin-11-jdk tzdata-java python3 zlib findutils which hostname iproute procps util-linux glibc-langpack-en wget tar crypto-policies-scripts \
# Set OS crypto policy to LEGACY to allow for older algorithms
    && update-crypto-policies --set LEGACY \
    && microdnf clean all

# Copy trimmed installation
COPY --from=cassandra-builder --chown=cassandra:root /etc/cassandra /etc/cassandra
COPY --from=cassandra-builder --chown=cassandra:root ${CASSANDRA_PATH} ${CASSANDRA_PATH}
COPY --from=cassandra-builder --chown=cassandra:root ${CASSANDRA_PATH}/LICENSE.txt /licenses/
COPY --from=cassandra-builder --chown=cassandra:root ${MCAC_PATH} ${MCAC_PATH}
COPY --from=cassandra-builder --chown=cassandra:root ${CDC_AGENT_PATH} ${CDC_AGENT_PATH}
COPY --from=mgmtapi-setup --chown=cassandra:root ${MAAC_PATH} ${MAAC_PATH}

# Create directories
RUN (for dir in ${CASSANDRA_DATA_DIR} \
                ${CASSANDRA_LOG_DIR} ; do \
        mkdir -p $dir && chown -R cassandra:root $dir && chmod 775 $dir ; \
    done ) && \
    # change mode of directories
    chmod a+rwX ${MAAC_PATH} ${MCAC_PATH} ${CASSANDRA_PATH} ${CDC_AGENT_PATH} /etc/cassandra

RUN if ! grep -qxF "JVM_OPTS=\"\$JVM_OPTS -javaagent:${MGMT_AGENT_JAR}\"" < ${CASSANDRA_CONF}/cassandra-env.sh ; then \
      echo "" >> ${CASSANDRA_CONF}/cassandra-env.sh && \
      echo "JVM_OPTS=\"\$JVM_OPTS -javaagent:${MGMT_AGENT_JAR}\"" >> ${CASSANDRA_CONF}/cassandra-env.sh ; \
  fi

# backwards compat with upstream ENTRYPOINT
COPY cassandra/scripts/docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh && \
  ln -sf /usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh && \
# fix for the missing mtab in the containerd
  ln -sf /proc/mounts /etc/mtab

ENV TINI_VERSION=v0.19.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-${TARGETARCH} /tini
RUN chmod +x /tini

# Set user to run as
USER cassandra

# Expose CASSANDRA folders
VOLUME ["/var/lib/cassandra", "/var/log/cassandra"]

# MANAGEMENT API, MCAC METRICS, NON-MCAC METRICS
EXPOSE 8080 9103 9000

# CASSANDRA PORTS (INTRA-NODE, TLS INTRA-NODE, JMX, CQL, THRIFT, DSEFS INTRA-NODE, INTRA-NODE MESSAGING SERVICE)
EXPOSE 7000 7001 7199 8609 9042 9160

ENTRYPOINT ["/tini", "-g", "--", "/docker-entrypoint.sh"]
CMD ["mgmtapi"]
