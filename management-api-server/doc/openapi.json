{
  "openapi" : "3.0.1",
  "info" : {
    "description" : "This is a Restful service for operating Apache Cassandra.  You can find out more about the Management API on [Github](http://github.com/k8ssandra/management-api-for-apache-cassandra)",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title" : "Management API for Apache Cassandraâ„¢",
    "version" : "0.1"
  },
  "paths" : {
    "/api/v0/lifecycle/configure" : {
      "post" : {
        "description" : "Configure Cassandra/DSE. Will fail if Cassandra/DSE is already started",
        "operationId" : "configureNode",
        "parameters" : [ {
          "in" : "query",
          "name" : "profile",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/yaml" : {
              "schema" : {
                "type" : "string"
              }
            },
            "text/yaml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra configured successfully"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "config missing",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra configure request is missing required data or has invalid data"
          },
          "406" : {
            "content" : {
              "text/plain" : {
                "example" : "Cassandra is running, try /api/v0/lifecycle/stop first",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra can't be configured while running"
          },
          "500" : {
            "description" : "Error configuring Cassandra"
          }
        }
      }
    },
    "/api/v0/lifecycle/pid" : {
      "get" : {
        "description" : "The PID of Cassandra/DSE, if it's running",
        "operationId" : "getPID",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra Process ID"
          },
          "204" : {
            "description" : "No Cassandra Process running"
          },
          "500" : {
            "content" : {
              "text/plain" : {
                "example" : "error message",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error finding Cassandra Process"
          }
        }
      }
    },
    "/api/v0/lifecycle/start" : {
      "post" : {
        "description" : "Starts Cassandra/DSE",
        "operationId" : "startNode",
        "parameters" : [ {
          "in" : "query",
          "name" : "profile",
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "replace_ip",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra started successfully"
          },
          "202" : {
            "description" : "Cassandra already running and can connect"
          },
          "204" : {
            "description" : "Cassandra already running but can't connect"
          },
          "206" : {
            "description" : "Cassandra process not found but can connect"
          },
          "420" : {
            "content" : {
              "text/plain" : {
                "example" : "Error starting Cassandra",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra could not start successfully"
          },
          "500" : {
            "content" : {
              "text/plain" : {
                "example" : "error message",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Error trying to start Cassandra"
          }
        }
      }
    },
    "/api/v0/lifecycle/stop" : {
      "post" : {
        "description" : "Stops Cassandra/DSE. Keeps node from restarting automatically until /start is called",
        "operationId" : "stopNode",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra stopped successfully"
          },
          "500" : {
            "content" : {
              "text/plain" : {
                "example" : "Killing Cassandra Failed",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra not stopped successfully"
          }
        }
      }
    },
    "/api/v0/metadata/endpoints" : {
      "get" : {
        "operationId" : "getEndpointStates",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EndpointStates"
                }
              }
            },
            "description" : "Endpoint states'"
          }
        },
        "summary" : "Returns this nodes view of the endpoint states of nodes"
      }
    },
    "/api/v0/metadata/localdc" : {
      "get" : {
        "operationId" : "getLocalDataCenter",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "datacenter1",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Local datacenter'"
          }
        },
        "summary" : "Returns the DataCenter the local node belongs to"
      }
    },
    "/api/v0/metadata/versions/features" : {
      "get" : {
        "operationId" : "getFeatureSet",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureSet"
                }
              }
            },
            "description" : "Local datacenter'"
          }
        },
        "summary" : "Returns the management-api featureSet"
      }
    },
    "/api/v0/metadata/versions/release" : {
      "get" : {
        "operationId" : "getReleaseVersion",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "4.0.1",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra version"
          }
        },
        "summary" : "Returns the Cassandra release version"
      }
    },
    "/api/v0/ops/auth/role" : {
      "post" : {
        "operationId" : "createRole",
        "parameters" : [ {
          "in" : "query",
          "name" : "username",
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "is_superuser",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "can_login",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "password",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Role created"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "Username is empty",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Username and/or password is empty"
          }
        },
        "summary" : "Creates a new user role"
      }
    },
    "/api/v0/ops/executor/job" : {
      "get" : {
        "operationId" : "getJobStatus",
        "parameters" : [ {
          "in" : "query",
          "name" : "job_id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Job"
                }
              }
            },
            "description" : "Map of job details"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Job"
                }
              }
            },
            "description" : "Job not found"
          }
        },
        "summary" : "Returns Job details for the supplied Job ID"
      }
    },
    "/api/v0/ops/keyspace" : {
      "get" : {
        "operationId" : "listKeyspaces",
        "parameters" : [ {
          "in" : "query",
          "name" : "keyspaceName",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "example" : [ "system_schema", "system", "system_auth", "system_distributed", "system_traces" ],
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            },
            "description" : "List of Keyspaces"
          }
        },
        "summary" : "List the keyspaces existing in the cluster"
      }
    },
    "/api/v0/ops/keyspace/alter" : {
      "post" : {
        "operationId" : "alterKeyspace",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateOrAlterKeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace Replication Settings altered successfully"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "Altering Keyspace failed. Non-empty 'keyspace_name' must be provided",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace name or Replication Settings not provided"
          }
        },
        "summary" : "Alter the replication settings of an existing keyspace"
      }
    },
    "/api/v0/ops/keyspace/cleanup" : {
      "post" : {
        "operationId" : "cleanup",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "d69d1d95-9348-4460-95d2-ae342870fade",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for keyspace cleanup process"
          }
        },
        "summary" : "Triggers the immediate cleanup of keys no longer belonging to a node. By default, clean all keyspaces. This operation is blocking and will return the executed job after finishing."
      }
    },
    "/api/v0/ops/keyspace/create" : {
      "post" : {
        "operationId" : "createKeyspace",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateOrAlterKeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace created successfully"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "Keyspace creation failed. Non-empty 'keyspace_name' must be provided",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace name or Replication Settings not provided"
          }
        },
        "summary" : "Create a new keyspace with the given name and replication settings"
      }
    },
    "/api/v0/ops/keyspace/refresh" : {
      "post" : {
        "operationId" : "refresh",
        "parameters" : [ {
          "in" : "query",
          "name" : "keyspaceName",
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "table",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "SSTables loaded successfully"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "Must provide a keyspace name",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace name or Table name not provided"
          }
        },
        "summary" : "Load newly placed SSTables to the system without restart"
      }
    },
    "/api/v0/ops/keyspace/replication" : {
      "get" : {
        "operationId" : "replication",
        "parameters" : [ {
          "in" : "query",
          "name" : "keyspaceName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "class" : "org.apache.cassandra.locator.SimpleStrategy",
                  "replication_factor" : "2"
                },
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace Replication Settings"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "Get keyspace replication failed. Non-empty 'keyspaceName' must be provided",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace name not provided"
          },
          "404" : {
            "content" : {
              "text/plain" : {
                "example" : "Get keyspace replication failed. Keyspace 'my_keyspace' does not exist.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace name not found"
          }
        },
        "summary" : "Get the replication settings of an existing keyspace"
      }
    },
    "/api/v0/ops/node/assassinate" : {
      "post" : {
        "operationId" : "assassinate",
        "parameters" : [ {
          "in" : "query",
          "name" : "address",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra node assasinated successfully"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "Address must be provided",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra node assasination request missing address"
          }
        },
        "summary" : "Forcefully remove a dead node without re-replicating any data. Use as a last resort if you cannot removenode"
      }
    },
    "/api/v0/ops/node/compaction" : {
      "post" : {
        "operationId" : "setCompactionThroughput",
        "parameters" : [ {
          "in" : "query",
          "name" : "value",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra compaction throughput set successfully"
          }
        },
        "summary" : "Set the MB/s throughput cap for compaction in the system, or 0 to disable throttling"
      }
    },
    "/api/v0/ops/node/decommission" : {
      "post" : {
        "operationId" : "decommission",
        "parameters" : [ {
          "in" : "query",
          "name" : "force",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra node decommissioned successfully"
          }
        },
        "summary" : "Decommission the *node I am connecting to*"
      }
    },
    "/api/v0/ops/node/drain" : {
      "post" : {
        "operationId" : "drain",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra node drained successfully"
          }
        },
        "summary" : "Drain the node (stop accepting writes and flush all tables)"
      }
    },
    "/api/v0/ops/node/fullquerylogging" : {
      "get" : {
        "operationId" : "isFullQueryLogEnabled",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "entity" : false,
                  "variant" : {
                    "language" : null,
                    "mediaType" : {
                      "type" : "application",
                      "subtype" : "json",
                      "parameters" : { },
                      "wildcardType" : false,
                      "wildcardSubtype" : false
                    },
                    "encoding" : null,
                    "languageString" : null
                  },
                  "annotations" : [ ],
                  "mediaType" : {
                    "type" : "application",
                    "subtype" : "json",
                    "parameters" : { },
                    "wildcardType" : false,
                    "wildcardSubtype" : false
                  },
                  "language" : null,
                  "encoding" : null
                },
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Full Query enabled"
          }
        },
        "summary" : "Get whether full query logging is enabled."
      },
      "post" : {
        "operationId" : "setFullQuerylog",
        "parameters" : [ {
          "in" : "query",
          "name" : "enabled",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Full Query Logging set successfully"
          }
        },
        "summary" : "Enable or disable full query logging facility."
      }
    },
    "/api/v0/ops/node/hints/truncate" : {
      "post" : {
        "operationId" : "truncateHints",
        "parameters" : [ {
          "in" : "query",
          "name" : "host",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra node hints truncated successfully"
          }
        },
        "summary" : "Truncate all hints on the local node, or truncate hints for the endpoint(s) specified."
      }
    },
    "/api/v0/ops/node/logging" : {
      "post" : {
        "operationId" : "setLoggingLevel",
        "parameters" : [ {
          "in" : "query",
          "name" : "target",
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "rawLevel",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra logging level set successfully"
          }
        },
        "summary" : "Set the log level threshold for a given component or class. Will reset to the initial configuration if called with no parameters."
      }
    },
    "/api/v0/ops/node/move" : {
      "post" : {
        "operationId" : "move",
        "parameters" : [ {
          "in" : "query",
          "name" : "newToken",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "content" : {
              "text/plain" : {
                "example" : "d69d1d95-9348-4460-95d2-ae342870fade",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for successfully scheduled Cassandra node move request"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "newToken must be specified",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Missing required newToken parameter"
          }
        },
        "summary" : "Move node on the token ring to a new token. This operation returns immediately with a job id."
      }
    },
    "/api/v0/ops/node/repair" : {
      "post" : {
        "operationId" : "repair",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/RepairRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Nodetool repair executed successfully"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "keyspaceName must be specified",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Repair request missing Keyspace name"
          }
        },
        "summary" : "Execute a nodetool repair operation"
      }
    },
    "/api/v0/ops/node/schema/reload" : {
      "post" : {
        "operationId" : "reloadLocalSchema",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra node schema reloaded successfully"
          }
        },
        "summary" : "Reload local node schema from system tables"
      }
    },
    "/api/v0/ops/node/schema/reset" : {
      "post" : {
        "operationId" : "resetLocalSchema",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra node scheam resynced successfully"
          }
        },
        "summary" : "Reset node's local schema and resync"
      }
    },
    "/api/v0/ops/node/search/rebuildIndex" : {
      "post" : {
        "operationId" : "searchIndexRebuild",
        "parameters" : [ {
          "in" : "query",
          "name" : "keyspace",
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "table",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "DSE Search index rebuild has started"
          },
          "400" : {
            "description" : "An attempt is made to rebuild the index on a server type (Cassandra) that does not support it"
          },
          "404" : {
            "description" : "An attempt is made to rebuild a non-existing index"
          },
          "500" : {
            "description" : "Internal error occurs that disallow us to determine if this operation is possible"
          }
        },
        "summary" : "Rebuild a DSE Search index"
      }
    },
    "/api/v0/ops/node/snapshots" : {
      "delete" : {
        "operationId" : "clearSnapshots",
        "parameters" : [ {
          "in" : "query",
          "name" : "snapshotNames",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "in" : "query",
          "name" : "keyspaces",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Snapshots cleared successfully"
          }
        },
        "summary" : "Clear snapshots"
      },
      "get" : {
        "operationId" : "getSnapshotDetails",
        "parameters" : [ {
          "in" : "query",
          "name" : "snapshotNames",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "in" : "query",
          "name" : "keyspaces",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SnapshotDetails"
                }
              }
            },
            "description" : "Cassandra snapshot details. Use 'null' values for query parameters to exclude result filtering against the parameter."
          }
        },
        "summary" : "Retrieve snapshot details"
      },
      "post" : {
        "operationId" : "takeSnapshot",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TakeSnapshotRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Snapshot created successfully"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "When specifying keyspace_tables, specifying keyspaces is not allowed",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Invalid snapshot request"
          }
        },
        "summary" : "Take a snapshot"
      }
    },
    "/api/v0/ops/node/streaminfo" : {
      "get" : {
        "operationId" : "getStreamInfo",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StreamingInfo"
                }
              }
            },
            "description" : "Cassandra streaming status info"
          }
        },
        "summary" : "Retrieve Streaming status information"
      }
    },
    "/api/v0/ops/seeds/reload" : {
      "post" : {
        "operationId" : "seedReload",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "example" : "[127.0.0.1, 127.0.0.2]",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "List of new seeds after reload"
          }
        },
        "summary" : "Reload the seed node list from the seed provider"
      }
    },
    "/api/v0/ops/tables" : {
      "get" : {
        "operationId" : "listTables",
        "parameters" : [ {
          "in" : "query",
          "name" : "keyspaceName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "example" : [ "table_1", "table_2" ],
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            },
            "description" : "Table list"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "List tables failed. Non-empty 'keyspaceName' must be provided",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace name not provided"
          }
        },
        "summary" : "List the table names in the given keyspace"
      }
    },
    "/api/v0/ops/tables/compact" : {
      "post" : {
        "operationId" : "compact",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CompactRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Table compaction successful"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "Invalid option combination: Can not use split-output here",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Invalid table compaction request"
          }
        },
        "summary" : "Force a (major) compaction on one or more tables or user-defined compaction on given SSTables"
      }
    },
    "/api/v0/ops/tables/create" : {
      "post" : {
        "operationId" : "createTable",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTableRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Table creation successful"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "Table creation failed: some failure message",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Table creation failed"
          }
        },
        "summary" : "Create a new table in an existing keyspace"
      }
    },
    "/api/v0/ops/tables/flush" : {
      "post" : {
        "operationId" : "flush",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Table flush successful"
          }
        },
        "summary" : "Flush one or more tables"
      }
    },
    "/api/v0/ops/tables/garbagecollect" : {
      "post" : {
        "operationId" : "garbageCollect",
        "parameters" : [ {
          "in" : "query",
          "name" : "tombstoneOption",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Table garbage collection successful"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "tombstoneOption must be either ROW or CELL",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Invalid table garbage collection request"
          }
        },
        "summary" : "Remove deleted data from one or more tables"
      }
    },
    "/api/v0/ops/tables/scrub" : {
      "post" : {
        "operationId" : "scrub",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScrubRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Table scrub successful"
          }
        },
        "summary" : "Scrub (rebuild sstables for) one or more tables"
      }
    },
    "/api/v0/ops/tables/sstables/upgrade" : {
      "post" : {
        "operationId" : "upgradeSSTables",
        "parameters" : [ {
          "in" : "query",
          "name" : "excludeCurrentVersion",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "SSTable upgrade successful"
          }
        },
        "summary" : "Rewrite sstables (for the requested tables) that are not on the current version (thus upgrading them to said current version)"
      }
    },
    "/api/v0/probes/cluster" : {
      "get" : {
        "operationId" : "checkClusterConsistency",
        "parameters" : [ {
          "in" : "query",
          "name" : "consistency_level",
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "rf_per_dc",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Cassandra is able to achieve the specified consistency"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "[-8842966077830801609, -7599446072150209635]" : [ "2 replicas required, but only 1 nodes in the ring" ],
                  "[-7599446072150209635, -6632081829071674136]" : [ "2 replicas required, but only 1 nodes in the ring" ]
                },
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cassandra is unable to achieve the specified consistency"
          }
        },
        "summary" : "Indicated whether the Cassandra cluster is able to achieve the specified consistency"
      }
    },
    "/api/v0/probes/liveness" : {
      "get" : {
        "operationId" : "checkLiveness",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Service is running"
          }
        },
        "summary" : "Indicates whether this service is running"
      }
    },
    "/api/v0/probes/readiness" : {
      "get" : {
        "operationId" : "checkReadiness",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Service is ready to handle requests"
          },
          "500" : {
            "description" : "Service is not ready to handle requests"
          }
        },
        "summary" : "Indicates whether the Cassandra service is ready to service requests"
      }
    },
    "/api/v1/ops/keyspace/cleanup" : {
      "post" : {
        "operationId" : "cleanup_v1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "example" : "OK",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Cleanup not needed for tables 'system' or 'system_schema'"
          },
          "202" : {
            "content" : {
              "text/plain" : {
                "example" : "d69d1d95-9348-4460-95d2-ae342870fade",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for keyspace cleanup process"
          }
        },
        "summary" : "Triggers the immediate cleanup of keys no longer belonging to a node. By default, clean all keyspaces. This operation is asynchronous and returns immediately"
      }
    },
    "/api/v1/ops/node/decommission" : {
      "post" : {
        "operationId" : "decommission_v1",
        "parameters" : [ {
          "in" : "query",
          "name" : "force",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "202" : {
            "content" : {
              "text/plain" : {
                "example" : "34034d36-3c1e-4bdb-8a8f-f92291a64cb3",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for successfully scheduled Cassandra node decommission request"
          }
        },
        "summary" : "Decommission the *node I am connecting to*. This invocation returns immediately and returns a job id."
      }
    },
    "/api/v1/ops/node/rebuild" : {
      "post" : {
        "operationId" : "rebuild_v1",
        "parameters" : [ {
          "in" : "query",
          "name" : "src_dc",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "content" : {
              "text/plain" : {
                "example" : "34034d36-3c1e-4bdb-8a8f-f92291a64cb3",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for successfully scheduled Cassandra node rebuild request"
          }
        },
        "summary" : "Rebuild data by streaming data from other nodes. This operation returns immediately with a job id."
      }
    },
    "/api/v1/ops/node/repair" : {
      "post" : {
        "operationId" : "repair_1",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/RepairRequest"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "content" : {
              "text/plain" : {
                "example" : "repair-1234567",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for successfully scheduled Cassandra repair request"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "keyspaceName must be specified",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Repair request missing Keyspace name"
          }
        },
        "summary" : "Execute a nodetool repair operation"
      }
    },
    "/api/v1/ops/node/schema/versions" : {
      "get" : {
        "operationId" : "getSchemaVersions",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "example" : "{2207c2a9-f598-3971-986b-2926e09e239d: [10.244.1.4, 10.244.2.3, 10.244.3.3]}",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Gets the schema versions for each node. Useful for checking schema agreement"
          }
        },
        "summary" : "Get schema versions."
      }
    },
    "/api/v1/ops/tables" : {
      "get" : {
        "operationId" : "listTablesV1",
        "parameters" : [ {
          "in" : "query",
          "name" : "keyspaceName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            },
            "description" : "Table list"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "List tables failed. Non-empty 'keyspaceName' must be provided",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace name not provided"
          }
        },
        "summary" : "List the table names in the given keyspace"
      }
    },
    "/api/v1/ops/tables/compact" : {
      "post" : {
        "operationId" : "compact_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CompactRequest"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "content" : {
              "text/plain" : {
                "example" : "d69d1d95-9348-4460-95d2-ae342870fade",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for keyspace compaction process"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "Invalid option combination: Can not use split-output here"
              }
            },
            "description" : "Invalid table compaction request"
          }
        },
        "summary" : "Force a (major) compaction on one or more tables or user-defined compaction on given SSTables"
      }
    },
    "/api/v1/ops/tables/compactions" : {
      "get" : {
        "operationId" : "getCompactions",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Compaction"
                  }
                }
              }
            },
            "description" : "Compactions"
          }
        },
        "summary" : "Returns active compactions"
      }
    },
    "/api/v1/ops/tables/flush" : {
      "post" : {
        "operationId" : "flush_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "content" : {
              "text/plain" : {
                "example" : "d69d1d95-9348-4460-95d2-ae342870fade",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for table flush process"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "keyspace sys-tem does not exists",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Invalid flush request"
          }
        },
        "summary" : "Flush one or more tables"
      }
    },
    "/api/v1/ops/tables/garbagecollect" : {
      "post" : {
        "operationId" : "garbageCollect_1",
        "parameters" : [ {
          "in" : "query",
          "name" : "tombstoneOption",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "content" : {
              "text/plain" : {
                "example" : "d69d1d95-9348-4460-95d2-ae342870fade",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for table garbage collection process"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "tombstoneOption must be either ROW or CELL",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Invalid table garbage collection request"
          }
        },
        "summary" : "Remove deleted data from one or more tables"
      }
    },
    "/api/v1/ops/tables/scrub" : {
      "post" : {
        "operationId" : "scrub_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScrubRequest"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "content" : {
              "text/plain" : {
                "example" : "d69d1d95-9348-4460-95d2-ae342870fade",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for table scrub process"
          }
        },
        "summary" : "Scrub (rebuild sstables for) one or more tables. This operation is asynchronous and returns immediately."
      }
    },
    "/api/v1/ops/tables/sstables/upgrade" : {
      "post" : {
        "operationId" : "upgradeSSTables_1",
        "parameters" : [ {
          "in" : "query",
          "name" : "excludeCurrentVersion",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "content" : {
              "text/plain" : {
                "example" : "d69d1d95-9348-4460-95d2-ae342870fade",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Job ID for keyspace SSTable upgrade process"
          }
        },
        "summary" : "Rewrite sstables (for the requested tables) that are not on the current version (thus upgrading them to said current version). This operation is asynchronous and returns immediately."
      }
    },
    "/api/v2/repairs" : {
      "delete" : {
        "operationId" : "deleteRepairsV2",
        "responses" : {
          "202" : {
            "content" : {
              "application/json" : {
                "example" : "Accepted",
                "schema" : {
                  "$ref" : "#/components/schemas/RepairRequestResponse"
                }
              }
            },
            "description" : "Cancel repairs Successfully requested"
          }
        },
        "summary" : "Cancel all repairs"
      },
      "put" : {
        "operationId" : "putRepairV2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RepairRequest"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "content" : {
              "application/json" : {
                "example" : "Accepted",
                "schema" : {
                  "$ref" : "#/components/schemas/RepairRequestResponse"
                }
              }
            },
            "description" : "Repair Successfully requested"
          },
          "400" : {
            "content" : {
              "text/plain" : {
                "example" : "keyspace must be specified",
                "schema" : {
                  "type" : "string",
                  "enum" : [ "OK", "Created", "Accepted", "No Content", "Reset Content", "Partial Content", "Moved Permanently", "Found", "See Other", "Not Modified", "Use Proxy", "Temporary Redirect", "Bad Request", "Unauthorized", "Payment Required", "Forbidden", "Not Found", "Method Not Allowed", "Not Acceptable", "Proxy Authentication Required", "Request Timeout", "Conflict", "Gone", "Length Required", "Precondition Failed", "Request Entity Too Large", "Request-URI Too Long", "Unsupported Media Type", "Requested Range Not Satisfiable", "Expectation Failed", "Precondition Required", "Too Many Requests", "Request Header Fields Too Large", "Internal Server Error", "Not Implemented", "Bad Gateway", "Service Unavailable", "Gateway Timeout", "HTTP Version Not Supported", "Network Authentication Required" ]
                }
              }
            },
            "description" : "Repair request missing Keyspace name"
          },
          "500" : {
            "content" : {
              "text/plain" : {
                "example" : "internal error, we did not receive the expected repair ID from Cassandra.",
                "schema" : {
                  "type" : "string",
                  "enum" : [ "OK", "Created", "Accepted", "No Content", "Reset Content", "Partial Content", "Moved Permanently", "Found", "See Other", "Not Modified", "Use Proxy", "Temporary Redirect", "Bad Request", "Unauthorized", "Payment Required", "Forbidden", "Not Found", "Method Not Allowed", "Not Acceptable", "Proxy Authentication Required", "Request Timeout", "Conflict", "Gone", "Length Required", "Precondition Failed", "Request Entity Too Large", "Request-URI Too Long", "Unsupported Media Type", "Requested Range Not Satisfiable", "Expectation Failed", "Precondition Required", "Too Many Requests", "Request Header Fields Too Large", "Internal Server Error", "Not Implemented", "Bad Gateway", "Service Unavailable", "Gateway Timeout", "HTTP Version Not Supported", "Network Authentication Required" ]
                }
              }
            },
            "description" : "internal error, we did not receive the expected repair ID from Cassandra."
          }
        },
        "summary" : "Initiate a new repair"
      }
    },
    "/api/v2/tokens/rangetoendpoint" : {
      "get" : {
        "operationId" : "getRangeToEndpointMapV2",
        "parameters" : [ {
          "in" : "query",
          "name" : "keyspaceName",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenRangeToEndpointResponse"
                }
              }
            },
            "description" : "Token range retrieval was successful"
          },
          "404" : {
            "content" : {
              "text/plain" : {
                "example" : "keyspace not found",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Keyspace not found"
          }
        },
        "summary" : "Retrieve a mapping of Token ranges to endpoints"
      }
    }
  },
  "components" : {
    "schemas" : {
      "Column" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "enum" : [ "PARTITION_KEY", "CLUSTERING_COLUMN", "REGULAR", "STATIC" ]
          },
          "name" : {
            "type" : "string"
          },
          "order" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          },
          "position" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          }
        },
        "required" : [ "name", "type" ]
      },
      "CompactRequest" : {
        "type" : "object",
        "properties" : {
          "end_token" : {
            "type" : "string"
          },
          "keyspace_name" : {
            "type" : "string"
          },
          "split_output" : {
            "type" : "boolean"
          },
          "start_token" : {
            "type" : "string"
          },
          "tables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "user_defined" : {
            "type" : "boolean"
          },
          "user_defined_files" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "keyspace_name", "split_output", "user_defined" ]
      },
      "Compaction" : {
        "type" : "object",
        "properties" : {
          "columnfamily" : {
            "type" : "string"
          },
          "compactionId" : {
            "type" : "string"
          },
          "completed" : {
            "type" : "integer",
            "format" : "int64"
          },
          "description" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "keyspace" : {
            "type" : "string"
          },
          "operationId" : {
            "type" : "string"
          },
          "operationType" : {
            "type" : "string"
          },
          "sstables" : {
            "type" : "string"
          },
          "targetDirectory" : {
            "type" : "string"
          },
          "taskType" : {
            "type" : "string"
          },
          "total" : {
            "type" : "integer",
            "format" : "int64"
          },
          "unit" : {
            "type" : "string"
          }
        }
      },
      "CreateOrAlterKeyspaceRequest" : {
        "type" : "object",
        "properties" : {
          "keyspace_name" : {
            "type" : "string"
          },
          "replication_settings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReplicationSetting"
            }
          }
        },
        "required" : [ "keyspace_name", "replication_settings" ]
      },
      "CreateTableRequest" : {
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Column"
            }
          },
          "keyspace_name" : {
            "type" : "string"
          },
          "options" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "table_name" : {
            "type" : "string"
          }
        },
        "required" : [ "columns", "keyspace_name", "table_name" ]
      },
      "EndpointStates" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "encoding" : {
            "type" : "string"
          },
          "entity" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "language" : {
            "type" : "string"
          },
          "mediaType" : {
            "$ref" : "#/components/schemas/MediaType"
          },
          "variant" : {
            "$ref" : "#/components/schemas/Variant"
          }
        },
        "required" : [ "entity" ]
      },
      "FeatureSet" : {
        "type" : "object",
        "properties" : {
          "cassandra_version" : {
            "type" : "string"
          },
          "features" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "ASYNC_SSTABLE_TASKS", "FULL_QUERY_LOGGING", "REBUILD", "ASYNC_UPGRADE_SSTABLE_TASK", "ASYNC_COMPACTION_TASKS", "ASYNC_SCRUB_TASK", "ASYNC_MOVE_TASK", "ASYNC_GC_TASK", "ASYNC_FLUSH_TASK" ]
            }
          },
          "mgmt_version" : {
            "type" : "string"
          }
        }
      },
      "Job" : {
        "type" : "object",
        "properties" : {
          "end_time" : {
            "type" : "integer",
            "format" : "int64"
          },
          "error" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ERROR", "COMPLETED", "WAITING" ]
          },
          "status_changes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StatusChange"
            }
          },
          "submit_time" : {
            "type" : "integer",
            "format" : "int64"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "KeyspaceRequest" : {
        "type" : "object",
        "properties" : {
          "jobs" : {
            "type" : "integer",
            "format" : "int32"
          },
          "keyspace_name" : {
            "type" : "string"
          },
          "tables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "jobs", "keyspace_name", "tables" ]
      },
      "MediaType" : {
        "type" : "object",
        "properties" : {
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "subtype" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "wildcardSubtype" : {
            "type" : "string"
          },
          "wildcardType" : {
            "type" : "string"
          }
        }
      },
      "RepairRequest" : {
        "type" : "object",
        "properties" : {
          "associated_tokens" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RingRange"
            }
          },
          "datacenters" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "full_repair" : {
            "type" : "boolean"
          },
          "keyspace" : {
            "type" : "string"
          },
          "repair_parallelism" : {
            "type" : "string",
            "enum" : [ "sequential", "parallel", "dc_parallel" ]
          },
          "repair_thread_count" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "keyspace" ]
      },
      "RepairRequestResponse" : {
        "type" : "object",
        "properties" : {
          "repair_id" : {
            "type" : "string"
          }
        },
        "required" : [ "repair_id" ]
      },
      "ReplicationSetting" : {
        "type" : "object",
        "properties" : {
          "dc_name" : {
            "type" : "string"
          },
          "replication_factor" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "dc_name", "replication_factor" ]
      },
      "RingRange" : {
        "type" : "object",
        "properties" : {
          "end" : {
            "type" : "integer",
            "format" : "int64"
          },
          "start" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "end", "start" ]
      },
      "ScrubRequest" : {
        "type" : "object",
        "properties" : {
          "check_data" : {
            "type" : "boolean"
          },
          "disable_snapshot" : {
            "type" : "boolean"
          },
          "jobs" : {
            "type" : "integer",
            "format" : "int32"
          },
          "keyspace_name" : {
            "type" : "string"
          },
          "reinsert_overflowed_ttl" : {
            "type" : "boolean"
          },
          "skip_corrupted" : {
            "type" : "boolean"
          },
          "tables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "check_data", "disable_snapshot", "jobs", "keyspace_name", "reinsert_overflowed_ttl", "skip_corrupted", "tables" ]
      },
      "SnapshotDetails" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "encoding" : {
            "type" : "string"
          },
          "entity" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "language" : {
            "type" : "string"
          },
          "mediaType" : {
            "$ref" : "#/components/schemas/MediaType"
          },
          "variant" : {
            "$ref" : "#/components/schemas/Variant"
          }
        },
        "required" : [ "entity" ]
      },
      "StatusChange" : {
        "type" : "object",
        "properties" : {
          "change_time" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "StreamingInfo" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "encoding" : {
            "type" : "string"
          },
          "entity" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "language" : {
            "type" : "string"
          },
          "mediaType" : {
            "$ref" : "#/components/schemas/MediaType"
          },
          "variant" : {
            "$ref" : "#/components/schemas/Variant"
          }
        },
        "required" : [ "entity" ]
      },
      "Table" : {
        "type" : "object",
        "properties" : {
          "compaction" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string"
          }
        },
        "required" : [ "name" ]
      },
      "TakeSnapshotRequest" : {
        "type" : "object",
        "properties" : {
          "keyspace_tables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "keyspaces" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skip_flush" : {
            "type" : "boolean"
          },
          "snapshot_name" : {
            "type" : "string"
          },
          "table_name" : {
            "type" : "string"
          }
        }
      },
      "TokenRangeToEndpointResponse" : {
        "type" : "object",
        "properties" : {
          "token_range_to_endpoints" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TokenRangeToEndpoints"
            }
          }
        },
        "required" : [ "token_range_to_endpoints" ]
      },
      "TokenRangeToEndpoints" : {
        "type" : "object",
        "properties" : {
          "endpoints" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tokens" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "endpoints", "tokens" ]
      },
      "Variant" : {
        "type" : "object",
        "properties" : {
          "encoding" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "languageString" : {
            "type" : "string"
          },
          "mediaType" : {
            "$ref" : "#/components/schemas/MediaType"
          }
        }
      }
    }
  }
}