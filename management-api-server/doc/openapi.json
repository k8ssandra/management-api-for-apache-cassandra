{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Management API for Apache Cassandraâ„¢",
    "description" : "This is a Restful service for operating Apache Cassandra.  You can find out more about the Management API on [Github](http://github.com/k8ssandra/management-api-for-apache-cassandra)",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "0.1"
  },
  "paths" : {
    "/api/v0/ops/auth/role" : {
      "post" : {
        "summary" : "Creates a new user role",
        "operationId" : "createRole",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "is_superuser",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "can_login",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/probes/liveness" : {
      "get" : {
        "summary" : "Indicates whether this service is running",
        "operationId" : "checkLiveness",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/probes/readiness" : {
      "get" : {
        "summary" : "Indicates whether the Cassandra service is ready to service requests",
        "operationId" : "checkReadiness",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/probes/cluster" : {
      "get" : {
        "summary" : "Indicated whether the Cassandra cluster is able to achieve the specified consistency",
        "operationId" : "checkClusterConsistency",
        "parameters" : [ {
          "name" : "consistency_level",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "rf_per_dc",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/seeds/reload" : {
      "post" : {
        "operationId" : "seedReload",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/keyspace" : {
      "get" : {
        "summary" : "List the keyspaces existing in the cluster",
        "operationId" : "listKeyspaces",
        "parameters" : [ {
          "name" : "keyspaceName",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/keyspace/replication" : {
      "get" : {
        "summary" : "Get the replication settings of an existing keyspace",
        "operationId" : "replication",
        "parameters" : [ {
          "name" : "keyspaceName",
          "required": true,
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "examples": {
                  "NetworkTopologyStrategy": {
                    "value": {
                      "class": "org.apache.cassandra.locator.NetworkTopologyStrategy",
                      "dc1": "3",
                      "dc2": "1"
                    },
                    "summary": "Example for a keyspace with NetworkTopologyStrategy"
                  },
                  "SimpleStrategy": {
                    "value": {
                      "class": "org.apache.cassandra.locator.SimpleStrategy",
                      "replication_factor": "3"
                    },
                    "summary": "Example for a keyspace with SimpleStrategy"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/ops/keyspace/refresh" : {
      "post" : {
        "summary" : "Load newly placed SSTables to the system without restart",
        "operationId" : "refresh",
        "parameters" : [ {
          "name" : "keyspaceName",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "table",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/keyspace/alter" : {
      "post" : {
        "summary" : "Alter the replication settings of an existing keyspace",
        "operationId" : "alterKeyspace",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateOrAlterKeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/keyspace/create" : {
      "post" : {
        "summary" : "Create a new keyspace with the given name and replication settings",
        "operationId" : "createKeyspace",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateOrAlterKeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/keyspace/cleanup" : {
      "post" : {
        "summary" : "Triggers the immediate cleanup of keys no longer belonging to a node. By default, clean all keyspaces",
        "operationId" : "cleanup",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/lifecycle/start" : {
      "post" : {
        "description" : "Starts Cassandra/DSE",
        "operationId" : "startNode",
        "parameters" : [ {
          "name" : "profile",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replace_ip",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        }
      }
    },
    "/api/v0/lifecycle/stop" : {
      "post" : {
        "description" : "Stops Cassandra/DSE. Keeps node from restarting automatically until /start is called",
        "operationId" : "stopNode",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        }
      }
    },
    "/api/v0/lifecycle/configure" : {
      "post" : {
        "description" : "Configure Cassandra/DSE. Will fail if Cassandra/DSE is already started",
        "operationId" : "configureNode",
        "parameters" : [ {
          "name" : "profile",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/yaml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        }
      }
    },
    "/api/v0/lifecycle/pid" : {
      "get" : {
        "description" : "The PID of Cassandra/DSE, if it's running",
        "operationId" : "getPID",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        }
      }
    },
    "/api/v0/metadata/versions/release" : {
      "get" : {
        "summary" : "Returns the Cassandra release version",
        "operationId" : "getReleaseVersion",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/metadata/endpoints" : {
      "get" : {
        "summary" : "Returns this nodes view of the endpoint states of nodes",
        "operationId" : "getEndpointStates",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/api/v0/metadata/localdc" : {
      "get" : {
        "summary" : "Returns the DataCenter the local node belongs to",
        "operationId" : "getLocalDataCenter",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/drain" : {
      "post" : {
        "summary" : "Drain the node (stop accepting writes and flush all tables)",
        "operationId" : "drain",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/fullquerylogging" : {
      "post" : {
        "summary" : "Enable or disable full query logging facility.",
        "operationId" : "setFullQuerylog",
        "parameters" : [ {
          "name" : "enabled",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      },
      "get" : {
        "summary" : "Get whether full query logging is enabled.",
        "operationId" : "isFullQueryLogEnabled",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/decommission" : {
      "post" : {
        "summary" : "Decommission the *node I am connecting to*",
        "operationId" : "decommission",
        "parameters" : [ {
          "name" : "force",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/compaction" : {
      "post" : {
        "summary" : "Set the MB/s throughput cap for compaction in the system, or 0 to disable throttling",
        "operationId" : "setCompactionThroughput",
        "parameters" : [ {
          "name" : "value",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/assassinate" : {
      "post" : {
        "summary" : "Forcefully remove a dead node without re-replicating any data. Use as a last resort if you cannot removenode",
        "operationId" : "assassinate",
        "parameters" : [ {
          "name" : "address",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/logging" : {
      "post" : {
        "summary" : "Set the log level threshold for a given component or class. Will reset to the initial configuration if called with no parameters.",
        "operationId" : "setLoggingLevel",
        "parameters" : [ {
          "name" : "target",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "rawLevel",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/hints/truncate" : {
      "post" : {
        "summary" : "Truncate all hints on the local node, or truncate hints for the endpoint(s) specified.",
        "operationId" : "truncateHints",
        "parameters" : [ {
          "name" : "host",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/schema/reset" : {
      "post" : {
        "summary" : "Reset node's local schema and resync",
        "operationId" : "resetLocalSchema",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/schema/reload" : {
      "post" : {
        "summary" : "Reload local node schema from system tables",
        "operationId" : "reloadLocalSchema",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/streaminfo" : {
      "get" : {
        "summary" : "Retrieve Streaming status information",
        "operationId" : "getStreamInfo",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/snapshots" : {
      "get" : {
        "summary" : "Retrieve snapshot details",
        "operationId" : "getSnapshotDetails",
        "parameters" : [ {
          "name" : "snapshotNames",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "keyspaces",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Clear snapshots",
        "operationId" : "clearSnapshots",
        "parameters" : [ {
          "name" : "snapshotNames",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "keyspaces",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      },
      "post" : {
        "summary" : "Take a snapshot",
        "operationId" : "takeSnapshot",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TakeSnapshotRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/node/repair" : {
      "post" : {
        "summary" : "Execute a nodetool repair operation",
        "operationId" : "repair",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RepairRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/tables" : {
      "get" : {
        "summary" : "List the tables in a keyspace",
        "operationId" : "listTables",
        "parameters" : [ {
          "name" : "keyspaceName",
          "required": true,
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [ "table1", "table2" ]
              }
            }
          }
        }
      }
    },
    "/api/v0/ops/tables/create" : {
      "post" : {
        "summary" : "Create a new table in an existing keyspace",
        "operationId" : "createTable",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTableRequest"
              },
              "example": {
                "keyspace_name" : "ks1",
                "table_name" : "table1",
                "columns" : [
                  { "name" : "pk1", "type": "int", "kind" : "PARTITION_KEY", "position" : 0 },
                  { "name" : "pk2", "type": "int", "kind" : "PARTITION_KEY", "position" : 1 },
                  { "name" : "cc1", "type": "timeuuid", "kind" : "CLUSTERING", "position" : 0, "order" : "DESC" },
                  { "name" : "cc2", "type": "text", "kind" : "CLUSTERING", "position" : 1, "order" : "ASC" },
                  { "name" : "v1", "type": "timestamp", "kind" : "REGULAR" },
                  { "name" : "v2", "type": "list<text>", "kind" : "REGULAR" },
                  { "name" : "s", "type": "boolean", "kind" : "STATIC" }
                ],
                "options": {
                  "bloom_filter_fp_chance": "0.01",
                  "caching" : { "keys": "ALL", "rows_per_partition" : "NONE" }
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/tables/sstables/upgrade" : {
      "post" : {
        "summary" : "Rewrite sstables (for the requested tables) that are not on the current version (thus upgrading them to said current version)",
        "operationId" : "upgradeSSTables",
        "parameters" : [ {
          "name" : "excludeCurrentVersion",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/tables/garbagecollect" : {
      "post" : {
        "summary" : "Remove deleted data from one or more tables",
        "operationId" : "garbageCollect",
        "parameters" : [ {
          "name" : "tombstoneOption",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/tables/scrub" : {
      "post" : {
        "summary" : "Scrub (rebuild sstables for) one or more tables",
        "operationId" : "scrub",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScrubRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/tables/flush" : {
      "post" : {
        "summary" : "Flush one or more tables",
        "operationId" : "flush",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeyspaceRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    },
    "/api/v0/ops/tables/compact" : {
      "post" : {
        "summary" : "Force a (major) compaction on one or more tables or user-defined compaction on given SSTables",
        "operationId" : "compact",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CompactRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "CreateOrAlterKeyspaceRequest" : {
        "required" : [ "keyspace_name", "replication_settings" ],
        "type" : "object",
        "properties" : {
          "keyspace_name" : {
            "type" : "string"
          },
          "replication_settings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReplicationSetting"
            }
          }
        }
      },
      "ReplicationSetting" : {
        "required" : [ "dc_name", "replication_factor" ],
        "type" : "object",
        "properties" : {
          "dc_name" : {
            "type" : "string"
          },
          "replication_factor" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "KeyspaceRequest" : {
        "required" : [ "jobs", "keyspace_name", "tables" ],
        "type" : "object",
        "properties" : {
          "jobs" : {
            "type" : "integer",
            "format" : "int32"
          },
          "keyspace_name" : {
            "type" : "string"
          },
          "tables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ScrubRequest" : {
        "required" : [ "check_data", "disable_snapshot", "jobs", "keyspace_name", "reinsert_overflowed_ttl", "skip_corrupted", "tables" ],
        "type" : "object",
        "properties" : {
          "disable_snapshot" : {
            "type" : "boolean"
          },
          "skip_corrupted" : {
            "type" : "boolean"
          },
          "check_data" : {
            "type" : "boolean"
          },
          "reinsert_overflowed_ttl" : {
            "type" : "boolean"
          },
          "jobs" : {
            "type" : "integer",
            "format" : "int32"
          },
          "keyspace_name" : {
            "type" : "string"
          },
          "tables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "CompactRequest" : {
        "required" : [ "keyspace_name", "split_output", "user_defined" ],
        "type" : "object",
        "properties" : {
          "split_output" : {
            "type" : "boolean"
          },
          "user_defined" : {
            "type" : "boolean"
          },
          "start_token" : {
            "type" : "string"
          },
          "end_token" : {
            "type" : "string"
          },
          "keyspace_name" : {
            "type" : "string"
          },
          "user_defined_files" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "TakeSnapshotRequest" : {
        "required" : [ ],
        "type" : "object",
        "properties" : {
          "snapshot_name" : {
            "type" : "string"
          },
          "keyspaces" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "table_name" : {
            "type" : "string"
          },
          "skip_flush" : {
            "type" : "boolean"
          },
          "keyspace_tables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RepairRequest" : {
        "required" : [ "keyspace_name" ],
        "type" : "object",
        "properties" : {
          "keyspace_name" : {
            "type" : "string"
          },
          "tables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "full" : {
            "type" : "boolean"
          }
        }
      },
      "CreateTableRequest": {
        "type" : "object",
        "required": [
          "keyspace_name",
          "table_name",
          "columns"
        ],
        "properties" : {
          "keyspace_name" : {
            "type" : "string",
            "description": "The name of the keyspace where the table is to be created. The keyspace must exist."
          },
          "table_name" : {
            "type" : "string",
            "description": "The name of the table to create."
          },
          "columns" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required": [
                "name",
                "type",
                "kind"
              ],
              "properties": {
                "name" : {
                  "type" : "string",
                  "description": "The name of the column."
                },
                "type" : {
                  "type" : "string",
                  "description": "The type of the column. Must be a valid CQL type, e.g. text, int or list<timmeuid>."
                },
                "kind" : {
                  "type" : "string",
                  "description": "The kind of the column. Must be one of: PARTITION_KEY, CLUSTERING_COLUMN, REGULAR, STATIC.",
                  "enum": [
                    "PARTITION_KEY",
                    "CLUSTERING_COLUMN",
                    "REGULAR",
                    "STATIC"
                  ]
                },
                "position" : {
                  "type" : "integer",
                  "description": "The zero-based index of the column in the partition key or clustering column group. Only required for the PARTITION_KEY and CLUSTERING_COLUMN kinds, ignored otherwise. Must be equal to or greater than zero.",
                  "minimum": 0
                },
                "order" : {
                  "type" : "string",
                  "description": "The clustering order of the column. Only required for the CLUSTERING_COLUMN kind, ignored otherwise. Must be one of: ASC, DESC.",
                  "enum": [
                    "ASC",
                    "DESC"
                  ]
                }
              }
            }
          },
          "options" : {
            "description": "The table options. Each option value must be either a string or a dictionary of strings.",
            "oneOf": [
              {
                "type" : "object",
                "example": {
                  "bloom_filter_fp_chance": "0.01"
                },
                "additionalProperties": {
                  "type": "string"
                }
              },
              {
                "type" : "object",
                "example": {
                  "caching" : { "keys": "ALL", "rows_per_partition" : "NONE" }
                },
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      }
    }
  }
}
